[ForAll([eh1, ad1],
        hostHasAddr(eh1, ad1) == (addrToHost(ad1) == eh1)),
 ForAll(eh1, Exists(ad1, hostHasAddr(eh1, ad1))),
 ForAll([eh1, eh2, p],
        recv(eh1, eh2, p) == send(eh1, eh2, p)),
 ForAll([eh1, eh2, p],
        Implies(recv(eh1, eh2, p),
                Exists(eh3,
                       send(addrToHost(src(p)), eh3, p)))),
 ForAll([eh1, eh2, p],
        Implies(send(eh1, eh2, p), eh1 != eh2)),
 ForAll([eh1, eh2, p],
        Implies(recv(eh1, eh2, p), eh1 != eh2)),
 addrToHost(addr_a) == a,
 addrToHost(addr_b) == b,
 ForAll(free_addr,
        hostHasAddr(a, free_addr) == (free_addr == addr_a)),
 ForAll(free_addr,
        hostHasAddr(b, free_addr) == (free_addr == addr_b)),
 ForAll(free_addr,
        hostHasAddr(c, free_addr) == (free_addr == addr_c)),
 ForAll(free_addr,
        hostHasAddr(d, free_addr) == (free_addr == addr_d)),
 ForAll([eh, p],
        Implies(recv(eh, a, p), hostHasAddr(a, dest(p)))),
 ForAll([eh, p],
        Implies(send(a, eh, p), hostHasAddr(a, src(p)))),
 ForAll([eh, p], Implies(send(a, eh, p), origin(p) == a)),
 ForAll([eh, p], Implies(recv(eh, a, p), Or(eh == proxy))),
 ForAll([eh, p], Implies(send(a, eh, p), Or(eh == proxy))),
 ForAll([eh, p],
        Implies(recv(eh, b, p), hostHasAddr(b, dest(p)))),
 ForAll([eh, p],
        Implies(send(b, eh, p), hostHasAddr(b, src(p)))),
 ForAll([eh, p], Implies(send(b, eh, p), origin(p) == b)),
 ForAll([eh, p], Implies(recv(eh, b, p), Or(eh == proxy))),
 ForAll([eh, p], Implies(send(b, eh, p), Or(eh == proxy))),
 ForAll([eh, p],
        Implies(recv(eh, c, p), hostHasAddr(c, dest(p)))),
 ForAll([eh, p],
        Implies(send(c, eh, p), hostHasAddr(c, src(p)))),
 ForAll([eh, p], Implies(send(c, eh, p), origin(p) == c)),
 ForAll([eh, p], Implies(recv(eh, c, p), Or(eh == fw_eh))),
 ForAll([eh, p], Implies(send(c, eh, p), Or(eh == fw_eh))),
 ForAll([eh, p],
        Implies(recv(eh, d, p), hostHasAddr(d, dest(p)))),
 ForAll([eh, p],
        Implies(send(d, eh, p), hostHasAddr(d, src(p)))),
 ForAll([eh, p], Implies(send(d, eh, p), origin(p) == d)),
 ForAll([eh, p], Implies(recv(eh, d, p), Or(eh == fw_eh))),
 ForAll([eh, p], Implies(send(d, eh, p), Or(eh == fw_eh))),
 ForAll([temp_eh, p],
        Implies(send(fw_eh, temp_eh, p),
                Exists(temp_eh2, recv(temp_eh2, fw_eh, p)))),
 ForAll([temp_eh, p],
        Implies(recv(temp_eh, fw_eh, p),
                Or(temp_eh == c,
                   temp_eh == d,
                   temp_eh == proxy))),
 ForAll([temp_eh, p],
        Implies(send(fw_eh, temp_eh, p),
                Or(temp_eh == c,
                   temp_eh == d,
                   temp_eh == proxy))),
 ForAll([temp_eh, p],
        Implies(send(fw_eh, temp_eh, p),
                Not(Or(And(src(p) == addr_a,
                           dest(p) == addr_c),
                       And(src(p) == addr_c,
                           dest(p) == addr_a),
                       And(src(p) == addr_b,
                           dest(p) == addr_d),
                       And(src(p) == addr_d,
                           dest(p) == addr_b))))),
 ForAll([temp_eh, p],
        Implies(recv(temp_eh, proxy, p),
                Or(temp_eh == a,
                   temp_eh == b,
                   temp_eh == fw_eh))),
 ForAll([temp_eh, p],
        Implies(send(proxy, temp_eh, p),
                Or(temp_eh == a,
                   temp_eh == b,
                   temp_eh == fw_eh))),
 ForAll([temp_eh, p],
        Implies(send(proxy, temp_eh, p),
                hostHasAddr(proxy, src(p)))),
 ForAll([temp_eh, p],
        Implies(send(proxy, temp_eh, p),
                Exists([p2, temp_eh2],
                       And(recv(temp_eh2, proxy, p2),
                           And(origin(p2) == origin(p),
                               dest(p2) == dest(p)))))),
 Exists(eh, recv(eh, c, p)),
 origin(p) == a,
 Exists(eh, recv(eh, d, p2)),
 origin(p2) == b]
====================================================================================
sat
;; universe for Address:
;;   Address!val!7 Address!val!6 Address!val!8 Address!val!20 Address!val!5 Address!val!10 Address!val!9 Address!val!16 Address!val!13 Address!val!4 Address!val!11 Address!val!1 Address!val!15 Address!val!19 Address!val!14 Address!val!0 Address!val!21 Address!val!18 Address!val!2 Address!val!12 Address!val!3 Address!val!17 Address!val!22 
;; -----------
;; definitions for universe elements:
(declare-fun Address!val!7 () Address)
(declare-fun Address!val!6 () Address)
(declare-fun Address!val!8 () Address)
(declare-fun Address!val!20 () Address)
(declare-fun Address!val!5 () Address)
(declare-fun Address!val!10 () Address)
(declare-fun Address!val!9 () Address)
(declare-fun Address!val!16 () Address)
(declare-fun Address!val!13 () Address)
(declare-fun Address!val!4 () Address)
(declare-fun Address!val!11 () Address)
(declare-fun Address!val!1 () Address)
(declare-fun Address!val!15 () Address)
(declare-fun Address!val!19 () Address)
(declare-fun Address!val!14 () Address)
(declare-fun Address!val!0 () Address)
(declare-fun Address!val!21 () Address)
(declare-fun Address!val!18 () Address)
(declare-fun Address!val!2 () Address)
(declare-fun Address!val!12 () Address)
(declare-fun Address!val!3 () Address)
(declare-fun Address!val!17 () Address)
(declare-fun Address!val!22 () Address)
;; cardinality constraint:
(forall ((x Address))
        (or (= x Address!val!7)
            (= x Address!val!6)
            (= x Address!val!8)
            (= x Address!val!20)
            (= x Address!val!5)
            (= x Address!val!10)
            (= x Address!val!9)
            (= x Address!val!16)
            (= x Address!val!13)
            (= x Address!val!4)
            (= x Address!val!11)
            (= x Address!val!1)
            (= x Address!val!15)
            (= x Address!val!19)
            (= x Address!val!14)
            (= x Address!val!0)
            (= x Address!val!21)
            (= x Address!val!18)
            (= x Address!val!2)
            (= x Address!val!12)
            (= x Address!val!3)
            (= x Address!val!17)
            (= x Address!val!22)))
;; -----------
(define-fun eh!6 () Endhost
  fw_eh)
(define-fun addr_b () Address
  Address!val!3)
(define-fun p () Packet
  (packet Address!val!10 Address!val!12 a))
(define-fun addr_a () Address
  Address!val!0)
(define-fun p2 () Packet
  (packet Address!val!13 Address!val!14 b))
(define-fun eh!5 () Endhost
  fw_eh)
(define-fun addr_c () Address
  Address!val!12)
(define-fun addr_d () Address
  Address!val!14)
(define-fun k!605 ((x!1 Endhost)) Endhost
  (ite (= x!1 c) c
  (ite (= x!1 d) d
  (ite (= x!1 a) a
  (ite (= x!1 b) b
  (ite (= x!1 fw_eh) fw_eh
    proxy))))))
(define-fun ad1!0!609 ((x!1 Endhost)) Address
  (ite (= x!1 c) Address!val!12
  (ite (= x!1 b) Address!val!3
  (ite (= x!1 proxy) Address!val!19
  (ite (= x!1 d) Address!val!14
  (ite (= x!1 fw_eh) Address!val!22
    Address!val!0))))))
(define-fun ad1!0 ((x!1 Endhost)) Address
  (ad1!0!609 (k!605 x!1)))
(define-fun eh3!1!613 ((x!1 Packet)) Endhost
  (ite (= x!1 (packet Address!val!0 Address!val!12 a)) proxy
  (ite (= x!1 (packet Address!val!3 Address!val!14 b)) proxy
  (ite (= x!1 (packet Address!val!2 Address!val!6 a)) a
  (ite (= x!1 (packet Address!val!2 Address!val!4 a)) a
    fw_eh)))))
(define-fun k!607 ((x!1 Endhost)) Endhost
  (ite (= x!1 proxy) proxy
  (ite (= x!1 a) a
  (ite (= x!1 d) d
  (ite (= x!1 b) b
  (ite (= x!1 c) c
    fw_eh))))))
(define-fun addrToHost ((x!1 Address)) Endhost
  (ite (= x!1 Address!val!0) a
  (ite (= x!1 Address!val!3) b
  (ite (= x!1 Address!val!12) c
  (ite (= x!1 Address!val!14) d
  (ite (= x!1 Address!val!2) fw_eh
  (ite (= x!1 Address!val!22) fw_eh
    proxy)))))))
(define-fun hostHasAddr ((x!1 Endhost) (x!2 Address)) Bool
  (ite (and (= x!1 c) (= x!2 Address!val!12)) true
  (ite (and (= x!1 d) (= x!2 Address!val!14)) true
  (ite (and (= x!1 proxy) (= x!2 Address!val!10)) true
  (ite (and (= x!1 proxy) (= x!2 Address!val!13)) true
  (ite (and (= x!1 a) (= x!2 Address!val!0)) true
  (ite (and (= x!1 b) (= x!2 Address!val!3)) true
  (ite (and (= x!1 proxy) (= x!2 Address!val!19)) true
  (ite (and (= x!1 a) (= x!2 Address!val!2)) false
  (ite (and (= x!1 fw_eh) (= x!2 Address!val!22)) true
  (ite (and (= x!1 b) (= x!2 Address!val!2)) false
  (ite (and (= x!1 c) (= x!2 Address!val!2)) false
  (ite (and (= x!1 d) (= x!2 Address!val!2)) false
    (= (addrToHost x!2) x!1))))))))))))))
(define-fun temp_eh2!3!614 ((x!1 Packet)) Endhost
  (ite (= x!1 (packet Address!val!13 Address!val!14 b)) b
    a))
(define-fun recv!615 ((x!1 Endhost) (x!2 Endhost) (x!3 Packet)) Bool
  (ite (and (= x!1 fw_eh)
            (= x!2 c)
            (= x!3 (packet Address!val!10 Address!val!12 a)))
    true
  (ite (and (= x!1 fw_eh)
            (= x!2 d)
            (= x!3 (packet Address!val!13 Address!val!14 b)))
    true
  (ite (and (= x!1 proxy)
            (= x!2 fw_eh)
            (= x!3 (packet Address!val!10 Address!val!12 a)))
    true
  (ite (and (= x!1 proxy)
            (= x!2 fw_eh)
            (= x!3 (packet Address!val!13 Address!val!14 b)))
    true
  (ite (and (= x!1 a)
            (= x!2 proxy)
            (= x!3 (packet Address!val!0 Address!val!12 a)))
    true
  (ite (and (= x!1 b)
            (= x!2 proxy)
            (= x!3 (packet Address!val!3 Address!val!14 b)))
    true
    false)))))))
(define-fun k!606 ((x!1 Packet)) Packet
  (ite (= x!1 (packet Address!val!10 Address!val!12 a))
    (packet Address!val!10 Address!val!12 a)
  (ite (= x!1 (packet Address!val!8 Address!val!9 b))
    (packet Address!val!8 Address!val!9 b)
  (ite (= x!1 (packet Address!val!0 Address!val!12 a))
    (packet Address!val!0 Address!val!12 a)
  (ite (= x!1 (packet Address!val!3 Address!val!14 b))
    (packet Address!val!3 Address!val!14 b)
  (ite (= x!1 (packet Address!val!2 Address!val!4 a))
    (packet Address!val!2 Address!val!4 a)
  (ite (= x!1 (packet Address!val!4 Address!val!5 a))
    (packet Address!val!4 Address!val!5 a)
  (ite (= x!1 (packet Address!val!15 Address!val!16 a))
    (packet Address!val!15 Address!val!16 a)
  (ite (= x!1 (packet Address!val!11 Address!val!1 a))
    (packet Address!val!11 Address!val!1 a)
  (ite (= x!1 (packet Address!val!13 Address!val!14 b))
    (packet Address!val!13 Address!val!14 b)
  (ite (= x!1 (packet Address!val!7 Address!val!4 a))
    (packet Address!val!7 Address!val!4 a)
  (ite (= x!1 (packet Address!val!2 Address!val!6 a))
    (packet Address!val!2 Address!val!6 a)
    (packet Address!val!4 Address!val!5 b)))))))))))))
(define-fun recv ((x!1 Endhost) (x!2 Endhost) (x!3 Packet)) Bool
  (recv!615 (k!607 x!1) (k!607 x!2) (k!606 x!3)))
(define-fun temp_eh2!2!610 ((x!1 Packet)) Endhost
  (ite (= x!1 (packet Address!val!0 Address!val!12 a)) a
  (ite (= x!1 (packet Address!val!3 Address!val!14 b)) a
    proxy)))
(define-fun temp_eh2!2 ((x!1 Packet)) Endhost
  (temp_eh2!2!610 (k!606 x!1)))
(define-fun temp_eh2!3 ((x!1 Packet)) Endhost
  (temp_eh2!3!614 (k!606 x!1)))
(define-fun eh3!1 ((x!1 Packet)) Endhost
  (eh3!1!613 (k!606 x!1)))
(define-fun send!611 ((x!1 Endhost) (x!2 Endhost) (x!3 Packet)) Bool
  (ite (and (= x!1 fw_eh)
            (= x!2 c)
            (= x!3 (packet Address!val!10 Address!val!12 a)))
    true
  (ite (and (= x!1 fw_eh)
            (= x!2 d)
            (= x!3 (packet Address!val!13 Address!val!14 b)))
    true
  (ite (and (= x!1 proxy)
            (= x!2 fw_eh)
            (= x!3 (packet Address!val!10 Address!val!12 a)))
    true
  (ite (and (= x!1 proxy)
            (= x!2 fw_eh)
            (= x!3 (packet Address!val!13 Address!val!14 b)))
    true
  (ite (and (= x!1 a)
            (= x!2 proxy)
            (= x!3 (packet Address!val!0 Address!val!12 a)))
    true
  (ite (and (= x!1 b)
            (= x!2 proxy)
            (= x!3 (packet Address!val!3 Address!val!14 b)))
    true
    false)))))))
(define-fun p2!4!612 ((x!1 Packet)) Packet
  (ite (= x!1 (packet Address!val!13 Address!val!14 b))
    (packet Address!val!3 Address!val!14 b)
  (ite (= x!1 (packet Address!val!3 Address!val!14 b))
    (packet Address!val!15 Address!val!16 a)
  (ite (= x!1 (packet Address!val!8 Address!val!9 b))
    (packet Address!val!17 Address!val!18 a)
  (ite (= x!1 (packet Address!val!4 Address!val!5 b))
    (packet Address!val!20 Address!val!21 a)
    (packet Address!val!0 Address!val!12 a))))))
(define-fun send ((x!1 Endhost) (x!2 Endhost) (x!3 Packet)) Bool
  (send!611 (k!607 x!1) (k!607 x!2) (k!606 x!3)))
(define-fun p2!4 ((x!1 Packet)) Packet
  (p2!4!612 (k!606 x!1)))
